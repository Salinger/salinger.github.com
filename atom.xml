<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[さりんじゃーのプログラミング日記]]></title>
  <link href="http://Salinger.github.com/atom.xml" rel="self"/>
  <link href="http://Salinger.github.com/"/>
  <updated>2013-01-21T02:53:20+09:00</updated>
  <id>http://Salinger.github.com/</id>
  <author>
    <name><![CDATA[Salinger]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Homebrew + virtualenv 環境でlibsvmのインストール]]></title>
    <link href="http://Salinger.github.com/blog/2013/01/18/1/"/>
    <updated>2013-01-18T02:42:00+09:00</updated>
    <id>http://Salinger.github.com/blog/2013/01/18/1</id>
    <content type="html"><![CDATA[<p>サポートベクターマシン(SVM)についての概要は <a href="http://ja.wikipedia.org/wiki/%E3%82%B5%E3%83%9D%E3%83%BC%E3%83%88%E3%83%99%E3%82%AF%E3%82%BF%E3%83%BC%E3%83%9E%E3%82%B7%E3%83%B3">Wikipedia</a> でも見てください。
スパムの分類、ユーザーのクラスタリング、他何か色々なものを分類する用途に使われます。今回はSVMを使うための環境構築を行った際のメモです。</p>

<!-- more -->


<h2>libsvmについて</h2>

<p><a href="http://www.csie.ntu.edu.tw/~cjlin/libsvm/">libsvm</a>はChih-Chung Changさん・Chih-Jen Linさんが開発したSVMのライブラリです。様々なSVMタイプ・カーネル関数、また細かくオプションも指定できるので、SVMを使う必要がある場合は、とりあえずこれを選んでおけば困ることは少ないと思います。</p>

<h2>libsvmのインストール</h2>

<pre><code>$ brew search libsvm
libsvm
</code></pre>

<p>brewにあった。ラッキー。</p>

<pre><code>$ brew install libsvm
</code></pre>

<p>本体のインストール完了。</p>

<pre><code>$ svm-train
Usage: svm-train [options] training_set_file [model_file]
options:
-s svm_type : set type of SVM (default 0)
        0 -- C-SVC              (multi-class classification)
...
</code></pre>

<p>動いた。がこれだとPython用バインディングがインストールできなかった。残念。</p>

<h2>libsvmのPython用バインディングのインストール</h2>

<p>無いなら、pipで公式のバインディングをインストールするためのsetup.pyを自分で書いてしまえばいいじゃない。てな訳で書いた奴をgithubに上げといた<a href="https://github.com/Salinger/libsvm-python">(libsvm-python)</a>。
問題はsetup.py書いたのが初めてなので、これであってるのかどうか自信がない。とりあえず以下のコマンドでインストールできます。</p>

<pre><code>$ pip install -e git+https://github.com/Salinger/libsvm-python.git#egg=libsvm-python
</code></pre>

<h2>動作確認</h2>

<p>テスト用のコード。</p>

<div><script src='https://gist.github.com/4579980.js'></script>
<noscript><pre><code>#!/usr/bin/env python                                                                                     
#-*- coding:utf-8 -*-                                                                                     

from svm import *
from svmutil import *

# For learning                                                                                            
t_label = [1,-1,1,-1]
t_data = [
    [1.0, 2.0, 3.0],
    [3.0, 1.5, 1.0],
    [2.0, 3.0, 4.0],
    [0.5, 1.0, 1.5]
    ]
problem = svm_problem(t_label, t_data)
parameter = svm_parameter('-s 0 -t 0')
t = svm_train(problem, parameter)

# For predict                                                                                             
p_label = [1, 1, -1, -1]
p_data = [
    [0.3, 0.9, 1.2],
    [2.0, 3.0, 4.5],
    [3.0, 1.0, 0.3],
    [1.0, 0.5, 0.25]
    ]
result = svm_predict(p_label, p_data , t)

print &quot;[Result]&quot;
for r in result:
    print r</code></pre></noscript></div>


<p>そして実行。</p>

<pre><code>$ python libsvm_test.py 
.*.*
optimization finished, #iter = 9
nu = 0.298326
obj = -0.596685, rho = 3.000257
nSV = 3, nBSV = 0
Total nSV = 3
Accuracy = 75% (3/4) (classification)
[Result]
[-1.0, 1.0, -1.0, -1.0]
(75.0, 1.0, 0.3333333333333333)
[[-1.3527684585781998], [3.038557720585867], [-1.9331234989121904], [-2.4115929900464406]]
</code></pre>

<p>問題なく動くのを確認できた。自分で書いたsetup.pyもとりあえず問題ないっぽい？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Homebrew + virtualenv 環境でMeCabのインストール]]></title>
    <link href="http://Salinger.github.com/blog/2013/01/17/1/"/>
    <updated>2013-01-17T18:40:00+09:00</updated>
    <id>http://Salinger.github.com/blog/2013/01/17/1</id>
    <content type="html"><![CDATA[<p>普段良く使うモジュールのMeCabのインストール。
Homebrewもvirutalenvも最近使い始めたばかりなので、自分用メモとして記録。</p>

<!-- more -->


<h2>virtualenv環境の作成</h2>

<p>普段はNormalという環境を作って、これを使うことにする。</p>

<pre><code>$ mkvirtualenv Normal
</code></pre>

<h2>MeCabのインストール</h2>

<pre><code>$ brew search mecab
mecab mecab-ipadic
</code></pre>

<p>Homebrewにあった。</p>

<pre><code>$ brew install mecab mecab-ipadic
$ mecab
</code></pre>

<p>これでこの時点の最新版である0.994とIPA辞書がインストールできた。動作確認。</p>

<pre><code>$ mecab
すもももももももものうち
すもも  名詞,一般,*,*,*,*,すもも,スモモ,スモモ
も      助詞,係助詞,*,*,*,*,も,モ,モ
もも    名詞,一般,*,*,*,*,もも,モモ,モモ
も      助詞,係助詞,*,*,*,*,も,モ,モ
もも    名詞,一般,*,*,*,*,もも,モモ,モモ
の      助詞,連体化,*,*,*,*,の,ノ,ノ
うち    名詞,非自立,副詞可能,*,*,*,うち,ウチ,ウチ
EOS
</code></pre>

<p>Ctrl + c で終了。
文字コード周りのトラブルも特になし。</p>

<h2>MeCabのPythonバインディングのインストール</h2>

<p>MacPortsのときはPythonバインディングもまとめてインストールできたが、Homebrewには無いっぽい。まあvirtualenvで作った環境にインストールするには結局自分で入れなきゃならないらしいので、普通にインストールすることにする。インストール先のvirtualenv環境のまま作業続行。</p>

<pre><code>$ cd ~/Downloads/
$ curl -O http://mecab.googlecode.com/files/mecab-python-0.994.tar.gz # 同じバージョンのものをダウンロード
$ pip install mecab-python-0.994.tar.gz # tar.gz のままインストールできる。
</code></pre>

<p>動作確認を行う。</p>

<h2>Pythonバインディングの動作確認</h2>

<p>サンプルコード</p>

<div><script src='https://gist.github.com/4555097.js'></script>
<noscript><pre><code>#!/usr/bin/env python                                                                                                                                           
#-*- coding:utf-8 -*-                                                                                                                                           
import MeCab

m = MeCab.Tagger(&quot;-Ochasen&quot;)
string = u&quot;それサバンナでも同じ事言えんの？&quot;

# MeCabでUnicode文字列を扱う場合は、一度エンコードする必要がある。                                                                                              
# この際、                                                                                                                                                      
# node = tagger.parseToNode(string.encode(&quot;utf-8&quot;))                                                                                                             
# とすると、stringがパース中にガベコレされてしまって、                                                                                                          
# 変な挙動になる場合があるので注意。このように一度変数に代入すれば問題ない。                                                                                    
string = string.encode(&quot;utf-8&quot;)
node = m.parseToNode(string)

# ノードを順番にたどる。                                                                                                                                        
# node.surface, node.feature はstr型なので、                                                                                                                    
# この時点でunicode型に変換する方がトラブル防止のためにはいいかも。                                                                                             
while node:
    print node.surface, node.feature
    node = node.next

</code></pre></noscript></div>


<p>実行。</p>

<pre><code>$ python mecab_test.py
 BOS/EOS,*,*,*,*,*,*,*,*
それ 名詞,代名詞,一般,*,*,*,それ,ソレ,ソレ
サバンナ 名詞,一般,*,*,*,*,サバンナ,サバンナ,サバンナ
で 助詞,格助詞,一般,*,*,*,で,デ,デ
も 助詞,係助詞,*,*,*,*,も,モ,モ
同じ 連体詞,*,*,*,*,*,同じ,オナジ,オナジ
事 名詞,非自立,一般,*,*,*,事,コト,コト
言え 動詞,自立,*,*,一段,未然形,言える,イエ,イエ
ん 助動詞,*,*,*,不変化型,基本形,ん,ン,ン
の 助詞,終助詞,*,*,*,*,の,ノ,ノ
？ 記号,一般,*,*,*,*,？,？,？
 BOS/EOS,*,*,*,*,*,*,*,*
</code></pre>

<p>動いた。</p>

<h2>おまけ</h2>

<p>今回はgistで書いたコードをブログに貼ってみたけど、</p>

<pre><code>{% gist 4555097 %}
</code></pre>

<p>の1行で長いコードを見やすい形式で貼れるのってかなり便利だ。
Github + Octopress 快適すぎる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Macでvirtualenvの設定]]></title>
    <link href="http://Salinger.github.com/blog/2013/01/16/2/"/>
    <updated>2013-01-16T17:41:00+09:00</updated>
    <id>http://Salinger.github.com/blog/2013/01/16/2</id>
    <content type="html"><![CDATA[<p>virtualenvはPython用の仮想環境構築のためのモジュール。virtualenvwrapperはvirtualenvを楽に使うためのラッパー。とりあえずPython周りの環境は、基本的にPython自体をHomebrewで、モジュールはvirtualenv + virtualenvwrapper + pip で管理することにする。</p>

<!-- more -->


<h2>Pythonのインストール</h2>

<p>必要な物をHomebrewでインストール。</p>

<pre><code>$ python -V
Python 2.7.2 # Macに標準で入ってるPython
$ brew install readline sqlite gdbm
$ brew install python --universal --framework
$ python -V
Python 2.7.2
</code></pre>

<p>あれっ？変化なし？
bashだとPathは問題なく2.7.3が起動したけど、普段使ってるtmux + zshだと2.7.2が起動した。.zshrcに以下のようにPathの記述をする必要あり。</p>

<pre><code>export PATH=/usr/local/bin:/usr/local/sbin:/sbin:/usr/sbin:${PATH}
</code></pre>

<p>.zshrcの再読み込み</p>

<pre><code>$ source .zshrc
$ python -V
Python 2.7.3
</code></pre>

<p>これでPython2系最新版のインストールはOK。</p>

<h2>virtualenvとvirtualenvwrapperのインストール</h2>

<pre><code>$ which pip # インストール先の確認
/usr/local/bin/pip # Homebrewでインストールした先になっているのを確認
$ pip install virtualenv
$ pip install virtualenvwrapper
$ mkdir ~/.virtualenvs
</code></pre>

<p>.zshrcに</p>

<pre><code>#virtualenv settings
export WORKON_HOME=$HOME/.virtualenvs
. /usr/local/share/python/virtualenvwrapper.sh
</code></pre>

<p>を記述。</p>

<pre><code>$ source .zshrc # リロード
virtualenvが見えない…
</code></pre>

<p>.zshrcに</p>

<pre><code>export PATH=/usr/local/share/python:${PATH}
</code></pre>

<p>を追記。</p>

<pre><code>$ source .zshrc
</code></pre>

<p>問題解決。</p>

<h2>テスト</h2>

<pre><code>$ pip freeze # 現在のモジュールの確認 (virtualenvなど)
$ mkvirtualenv test1 # test1という環境を作成
$ deactivate #環境から抜ける
$ mkvirtualenv test2 # test2という環境を作成
$ workon # 環境の一覧を確認
test1
test2
$ workon test1 # testを選択
$ pip install numpy # test1 にnumpyをインストール
$ pip freeze # nuupyのインストールを確認
$ deactivate 
$ pip freeze # 元の環境に影響がないのを確認
$ rmvirtualenv test1 # テスト環境を削除
$ rmvirtualenv test2
$ workon # 出力なし 削除完了
</code></pre>

<p>動作確認完了。モジュールの切り替えが非常に楽なので、今後の開発が捗りそう。</p>

<h2>Octopressとzshのトラブル？</h2>

<p>この記事を書こうとして、</p>

<pre><code>$ rake new_post["2"]
</code></pre>

<p>を実行したら、</p>

<pre><code>$ zsh: no matches found: new_post["2"]
</code></pre>

<p>というエラーが。何故だ？しかし、</p>

<pre><code>$ rake new_post
$ Enter a post title:2
</code></pre>

<p>作成できたぞ？今回Pathを弄ったのが原因か？<br/>
この辺の動作がよくわからんので。また確認しとかないと。</p>

<h3>追記</h3>

<p>.zshrcに</p>

<pre><code>alias rake="noglob rake"
</code></pre>

<p>を追記したらエラー消えました。ありがとうございます > shogo82148 。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[homebrew環境の構築]]></title>
    <link href="http://Salinger.github.com/blog/2013/01/16/1/"/>
    <updated>2013-01-16T02:41:00+09:00</updated>
    <id>http://Salinger.github.com/blog/2013/01/16/1</id>
    <content type="html"><![CDATA[<p>Macbook Airの環境を再構築したので、その際のメモ。今まではパッケージ管理にMacPortsを使っていたが、今回からHomebrewに移行した。元からMountain LionにインストールされてるPythonやRubyと、パッケージ管理ソフトで導入したそれらの最新版の管理がMacPortsだと少々面倒くさかったので、もう少し楽に済みそうなものを使ってみようというのが理由だ。</p>

<!-- more -->


<h2>Homebrewのインストール</h2>

<p>以下のコマンドを実行。</p>

<pre><code>$ ruby -e "$(curl -fsSkL raw.github.com/mxcl/homebrew/go)"
$ brew doctor
</code></pre>

<p>gitのインストール。</p>

<pre><code>$ brew install git
</code></pre>

<p>Homebrewのアップデート。</p>

<pre><code>$ brew update
</code></pre>

<p><code>/usr/local/sbin</code>の作成。</p>

<pre><code>$ mkdir /usr/local/sbin
</code></pre>

<p>Pathを設定するため<code>/etc/paths</code>の編集。</p>

<pre><code>/usr/bin
/bin
/usr/sbin
/sbin
/usr/local/bin
</code></pre>

<p>となっているのを、</p>

<pre><code>/usr/local/bin
/usr/bin
/bin
/usr/sbin
/usr/local/sbin
/sbin
</code></pre>

<p>と変更。これでHomebrewでインストールした方が優先される。
ターミナルを再起動してとりあえずの設定は終わり。</p>

<h2>Ruby1.9.3のインストール</h2>

<p>とりあえずこのブログを編集するためのRuby環境構築。</p>

<pre><code>$ brew install ruby
$ gem install bundler
</code></pre>

<p>このBlogのデータを<code>git clone</code>で作業用ディレクトリに持ってきて、そのディレクトに移動。そこで、</p>

<pre><code>$ bundle install
</code></pre>

<p>を実行しようとしたら、bundleコマンドが見当たらないぞ？次のコマンドを実行すれば良かった。</p>

<pre><code>$ brew unlink ruby
$ brew link ruby
</code></pre>

<h2>おわりに</h2>

<p>こんな感じでBlogを更新するための環境の再構築はとりあえず終了。MacPortsの時に面倒だったRubyとGemのバージョン指定周りも特に気にする必要はなかった。早くPythonの環境も整えないと。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac + Ruby + Octopress + Github でブログの作成]]></title>
    <link href="http://Salinger.github.com/blog/2013/01/14/1/"/>
    <updated>2013-01-14T22:22:00+09:00</updated>
    <id>http://Salinger.github.com/blog/2013/01/14/1</id>
    <content type="html"><![CDATA[<p>技術系の話をメモするためのブログを作ろうと思っていたところ、このようなものを発見<a href="http://octopress.org">Octopress</a>。コードの管理に普段からGithubを使ってるので、技術系の話はすべてGithub上に集約してしまおう、という試み。以下SSHKeyの登録などGithubの設定はひと通り終わってる前提で話を進めています。</p>

<!-- more -->


<h2>環境</h2>

<p>PC: MacBook Air, Core i5 1.7GHz, Mem 4GB<br/>
OS: OS X 10.8.2<br/>
XCode: 4.5.2</p>

<h2>Rubyのインストール</h2>

<p>1.9.3が入ってればいいらしいので、MacPortsを使ってインストール。</p>

<pre><code>$ sudo port install ruby19 +nosuffix
</code></pre>

<p>bundle のインストール (とりあえずgem1.9を使えば問題はなかった。gem だと標準でインストールされている1.8系にインストールされるのか？試していないので分からないが)。</p>

<pre><code>$ sudo gem1.9 install bundle
</code></pre>

<h2>Octopressのインストール</h2>

<pre><code>$ cd ~/Downloads/
$ git clone https://github.com/imathis/octopress.git
$ cd octopress
$ bundle install
$ rake install
</code></pre>

<h2>Github Pagesの準備</h2>

<p>Github Pagesを利用するために、username.github.com というような名前でリポジトリを作成。<a href="https://github.com/repositories/new">ここ</a>で私の場合はsalinger.github.comという名前で作成した。→のGithub Reposに見えてるかな？</p>

<h2>Octpress のデプロイ設定</h2>

<pre><code>$ rake setup_github_pages
</code></pre>

<p>ここでgit@github.com:Salinger/salinger.github.com.git を入力。</p>

<pre><code>$ rake generate
$ rake deploy
</code></pre>

<p>この2行をまとめて実行する場合には</p>

<pre><code>$ rake gen_deploy
</code></pre>

<p>で可能。</p>

<h2>Github コミット</h2>

<pre><code>$ git add . &amp;&amp; git commit -m "Initial commit"
$ git push
</code></pre>

<h2>初期設定</h2>

<p><a href="http://change-the-world.github.com/blog/2012/08/26/1/">ここ</a>を見ながら_config.ymlを弄って初期設定。Github,Twitterとの連携も簡単にできる。</p>

<h2>新規記事作成</h2>

<pre><code>$ rake new_post["1"]
</code></pre>

<p>sourse/_posts/以下に新しい記事のテンプレートが作成される。
<a href="http://ja.wikipedia.org/wiki/Markdown">Wikipedia:Markdown</a>
を見ながら、テストがてらこの記事を作成してみた。
なおデプロイする前に</p>

<pre><code>$ rake generate
$ rake preview
</code></pre>

<p>を実行すると、http://localhost:4000でプレビューが見れる。</p>

<pre><code>$ rake deploy
$ git add . &amp;&amp; git commit -m "Create octopress install page."
$ git push
</code></pre>

<h2>コメント欄の追加</h2>

<p>記事にコメント欄を追加するには、<a href="http://disqus.com/">Disqus</a>に登録しなければならないっぽいので登録した。<a href="http://blog.morizotter.com/octopress%E3%81%AB%E3%82%B3%E3%83%A1%E3%83%B3%E3%83%88%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B/">このページ</a>を見つつ_config.ymlに設定を記述した。</p>

<h2>サイドバーにプロフィール欄を追加</h2>

<p><a href="http://www.mk-mode.com/octopress/2012/12/17/octopress-add-profile/">ここ</a>を参考にしました。<code>source/_includes/custom/asides/about.html</code> を編集（中身はただのHTML）。サイドバーの表示設定を変更するために_config.ymlを編集。</p>

<pre><code>default_asides: [...]
</code></pre>

<p>の中の任意の位置にcustom/asides/about.htmlを追加する。genereteしてdeployすればプロフィールがサイドバーに表示されるはず。</p>

<h2>感想</h2>

<p>ちょこちょこ弄ってみた感想ですが、<br/>
1. Githubとの連携が良い感じ。<br/>
2. Markdown記法なかなか書きやすい。普段使ってるEmacsで書けるのはありがたい。<br/>
3. 2とも関連するが、作業中にエディタ内でシームレスに書けるのは非常に楽。<br/>
静的なページでいいなら、レンタルサーバ借りるよりもこっちの方がいいかも。</p>
]]></content>
  </entry>
  
</feed>
