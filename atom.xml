<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[さりんじゃーのプログラミング日記]]></title>
  <link href="http://Salinger.github.com/atom.xml" rel="self"/>
  <link href="http://Salinger.github.com/"/>
  <updated>2013-01-27T23:17:25+09:00</updated>
  <id>http://Salinger.github.com/</id>
  <author>
    <name><![CDATA[Salinger]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NDS30:JAWS-UG-NGキックオフ に参加してきました]]></title>
    <link href="http://Salinger.github.com/blog/2013/01/27/2/"/>
    <updated>2013-01-27T22:55:00+09:00</updated>
    <id>http://Salinger.github.com/blog/2013/01/27/2</id>
    <content type="html"><![CDATA[<p>2013年1月26日に行われた<a href="http://nagaoka.techtalk.jp/no30">長岡開発者勉強会(NDS)</a>に参加してきました。今回は第30回でメインテーマはAmazon Web Service(AWS)のハンズオン。前回はWindows Azureのハンズオンだったので、2回連続で講師のもと、クラウド関連のサービスに触れる貴重な機会となりました。</p>

<!-- more -->


<h2>JAWS-UG-NG発足の儀</h2>

<p>JAWS-UG は AWS User Group - Japan 最後のNGは 新潟 or 長岡。31番目の支部らしい。</p>

<h2>AWSハンズオン</h2>

<p>VPC(Virtual Private Cloud)の作成から始まって、EC2インスタンスを作成してアプリケーションサーバの構築、DBインスタンスを作成してEC2インスタンス内で動かしてたデータベースを移行、ロードバランサの追加という流れで進んでいった。</p>

<p>小規模なWebサービスを立ち上げて、トラフィックの増加に従い、システムリソースの拡張を行う際の流れをひと通り経験出来た。システムの可用性の向上、セキュリティ面で注意すべきことなどの話もきちんとあり、AWS未経験の人間でも数時間でそれなりのシステムが組めるようになった(気がする)。</p>

<p>今回のハンズオンでAWSに以下の様な印象を持った。</p>

<ul>
<li>低コスト

<ul>
<li>時間やマシンスペックなどこちらの方が割安</li>
</ul>
</li>
<li><a href="http://aws.amazon.com/jp/products/">豊富なサービス</a>が用意されている

<ul>
<li>一番気になったのは、<a href="http://aws.amazon.com/jp/elasticmapreduce/">Amazon Elastic MapReduce(EMR)</a>。Hadoopクラスタのセットアップ &amp; 計算量に応じた計算機の確保が容易に出来そう。今後のために使い方勉強しておいたほうが良さそうだ。</li>
<li><a href="http://aws.amazon.com/jp/glacier/">Amazon Glacier</a>も気になった。データの取り出しに時間が必要だが1ヶ月あたり0.01USD/GBと、大容量のデータを安価にバックアップできる。</li>
</ul>
</li>
<li>細かいルールや設定の管理・適用がしやすい</li>
</ul>


<p>Azureも悪くはないが、個人で利用する場合は少しコスト面が気になる。ネットワーク周りやディスクアクセス周りは、両者で実際にそれなりのサービスを動かして比較してみないとなんとも言えませんね。AWSで今後使う可能性がありそうなサービスは、EC2で簡易なWebサービスのホスト、Amazon Glacierで重要であまり変更が行われないデータのバックアップあたりかな？将来的にはHadoop関連のサービスあたりも使うかも。1年間の無料枠があるので、その間にもう少しいじってみる予定。</p>

<h2>LT(ライトニングトーク)</h2>

<p>一人あたり約5分程度の枠で合計約1時間程度の発表。</p>

<h3>5min de Heroku (@dictav)</h3>

<p><a href="https://gist.github.com/4640042">https://gist.github.com/4640042</a><br/>
Webサービスが簡単に作れる。<br/>
スケーリングも簡単にできるが、お金も必要。<br/>
簡易な処理で済むサービス動かすならいい感じ。<br/>
家で調べてみたらこのブログで使ってるOctopressもHerokuにデプロイ可能なようだ。</p>

<h3>音をグリッチしてモテたい話 (@neko_gata_s)</h3>

<p><a href="https://github.com/Shinpeim/WaveZutaZuta">https://github.com/Shinpeim/WaveZutaZuta</a><br/>
いけてるほうのねこがたさん<br/>
音を分割して繋いでリミックス<br/>
くーる！<br/>
えんじにあにはもててた</p>

<h3>高齢者テスター事業構想について (@muromav)</h3>

<p>NPOが実施している高齢者向けパソコン教室の受講者の高齢者のみささんにテスターをやってもらおうという試み。<br/>
「自助」災害時に自力で情報収集 ＋「共助」高齢者の友達の輪<br/>
開発者は若年層が多いので、高齢者向けのデザインはあまり考慮されてないものが多い。高齢者にも優しいプロダクトを。<br/>
多少なりとも報酬を。高齢者のPC学習のモチベーション向上に。</p>

<h3>Raspberry PiでLチカ(aokcub)</h3>

<p>Raspberry Piネタ1人目。<br/>
<a href="https://github.com/aokcub/PiGPIO">https://github.com/aokcub/PiGPIO</a><br/>
Lチカ。LEDチカチカ。マイコンのHello, World!<br/>
Perlで制御。PWM制御も実装。<br/>
もてそう。</p>

<h3>Raspberry Piについてのなにか (@yutacar)</h3>

<p>Raspberry Piネタ2人目。<br/>
USB温度センサーで部屋の温度取得。<br/>
Matplotlibでグラフ化<br/>
将来はエアコンの管理も？</p>

<h3>Raspberry PiとキャラクタLCDで遊んでみた。 (@salinger001101)</h3>

<p>私が発表しました。このBlogに書いたRaspberry Piネタ(概要・キャラクタLCD・人工無能)を話しました。<br/>
<a href="http://Salinger.github.com/data/nds30/20130127.pdf">発表スライドのPDF</a><br/>
<a href="https://gist.github.com/4640042">LCD制御用のプログラム</a><br/>
<a href="https://github.com/Salinger/MunouChan-onRaspberryPi">人工無能: MunouChan</a></p>

<h3>High Performance Web Server (@wokamoto)</h3>

<p>Webサービスの高速化についてのお話。</p>

<ol>
<li>HipHop VM for PHP

<ul>
<li>PHPをC++に自動変換して高速化。VMで動的に。</li>
</ul>
</li>
<li>mod_pagespeed

<ul>
<li>GoogleのWebサイト高速化モジュール。Apacheサーバに。余計なコード(コメントなど)を自動的に除去。ngx_pagespeedもあるのでnginxでも問題なし。</li>
</ul>
</li>
<li>SPDY

<ul>
<li>通信プロトコル。接続の高速化。ブラウザが対応してないとダメ。最新版のChrome、Firefox、Operaはデフォルトで対応済み。つまりIEはダメ。</li>
<li>Multiplexed streams、Request prioritization、HTTP header compression、Server push、Server hintなど。</li>
</ul>
</li>
</ol>


<h3>AWSとTitaniumの新しい関係 (@NPoi)</h3>

<p>Titanium Mobile: JavaScriptでiOS・Androidのアプリが書ける。<br/>
Appcelerator Cloud Services(ACS) -> AWS上で動いている<br/>
BaaS Backend as a Service<br/>
あらかじめ用意された機能群から必要な機能を選択できる。<br/>
サーバーサイド、バックエンド側の知識が少なくてもどうにかなるように。<br/>
非常に高い堅牢性。</p>

<h2>まとめ</h2>

<p>短時間でAWSでのWebサービス構築方法を学べたので非常に有意義だった。LTも普段触れない技術に触れることの出来る良い機会でした。そろそろLTで言語処理関連の話や機械学習の話もしたいですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspberry Piに人工無脳搭載してみた]]></title>
    <link href="http://Salinger.github.com/blog/2013/01/27/1/"/>
    <updated>2013-01-27T00:09:00+09:00</updated>
    <id>http://Salinger.github.com/blog/2013/01/27/1</id>
    <content type="html"><![CDATA[<p>前回の記事に引き続きRaspberry Piネタ。マルコフ連鎖により文章を自動生成しLCDに出力してみた。</p>

<p><img src="http://Salinger.github.com/images/2013-01-27/001.png" alt="出力例の画像" /></p>

<!--more-->


<h2>人工無脳とは</h2>

<p>考えてるように見えて考えてない。ただ確率に従い文章を生成するプログラム。それでも人間から見ると、意味のある文章に見える文章が生成される。</p>

<p>基本的な生成手順は</p>

<ol>
<li>元データを形態素解析して形態素毎に分割</li>
<li>マルコフ連鎖により再構成</li>
</ol>


<h2>形態素解析</h2>

<p>自然言語で書かれた文を、形態素 (言語で意味を持つ最小単位) ごとに分割し、各形態素の品詞を特定することを形態素解析と呼ぶ。プログラムで自然言語を扱う場合、よく使われる技術の一つ。細かいことは<a href="http://ja.wikipedia.org/wiki/%e5%bd%a2%e6%85%8b%e7%b4%a0%e8%a7%a3%e6%9e%90">Wikipedia</a> でも見てください。</p>

<p>日本語の形態素解析を行うためのツールは以下の様なものがある。</p>

<ul>
<li><a href="http://mecab.sourceforge.net/">MeCab</a>

<ul>
<li>bi-gram マルコフモデル</li>
<li>学習モデルはCRF</li>
</ul>
</li>
<li><a href="http://chasen-legacy.sourceforge.jp">ChaSen</a>

<ul>
<li>可変長マルコフモデル</li>
<li>学習モデルは隠れマルコフモデル(HMM)</li>
</ul>
</li>
<li><a href="http://www.phontron.com/kytea/index-ja.html">KyTea</a>

<ul>
<li>比較的最近でてきたもの</li>
<li>ネットスラングや顔文字などの認識も比較的精度がいいらしい</li>
</ul>
</li>
<li><a href="http://developer.yahoo.co.jp/webapi/jlp/ma/v1/parse.html">日本語形態素解析Webサービス</a>

<ul>
<li>Webベースの日本語形態素解析API</li>
<li>組み込み系などマシンが非力な場合にも使えそう</li>
</ul>
</li>
</ul>


<p>今回は使い慣れているMeCabを使いました。</p>

<h2>マルコフ連鎖</h2>

<p>すごく簡単に言うと、ある要素を次々と発生させる状況を考えたときに、次の要素が現在の要素のみによって決まるのがマルコフ連鎖である。詳しくは<a href="http://ja.wikipedia.org/wiki/%e3%83%9e%e3%83%ab%e3%82%b3%e3%83%95%e9%80%a3%e9%8e%96">Wikipedia</a>でも見てください。</p>

<p>これを文章に適用した場合の例だが、解説はこのページがわかりやすい(<a href="https://www.evernote.com/shard/s70/sh/71947f67-ee6c-405f-92a2-1d64fd631639/2d9397138827808cbc21c36c9389f642">「それが大事」にマルコフ連鎖を適用してみる</a>)。</p>

<p>ある単語があったとき、その単語の次に現れる可能性のある単語の確率のみを考える場合を単語uni-gramのマルコフ連鎖、2単語ずつをペアにして考える場合を単語bi-gramのマルコフ連鎖、さらに続いてtri-gram、4-gram、…N-gram。と呼ぶ。</p>

<p>例えば、<br/>
私/は/旅行/に/行き/たい/。<br/>
という文章があった場合、</p>

<ul>
<li>単語uni-gram:

<ul>
<li>&#8220;私&#8221;, &#8220;は&#8221;, &#8220;旅行&#8221;, &#8220;に&#8221;, &#8220;行き&#8221;, &#8220;たい&#8221;, &#8220;。&#8221;</li>
</ul>
</li>
<li>単語bi-gram:

<ul>
<li>&#8220;私/は&#8221;, &#8220;は/旅行&#8221;, &#8220;旅行/に&#8221;, &#8220;に/行き&#8221;, &#8220;行き/たい&#8221;, &#8220;たい/。&#8221;</li>
</ul>
</li>
<li>単語tri-gram:

<ul>
<li>&#8220;私/は/旅行&#8221;, &#8220;は/旅行/に&#8221;, &#8220;旅行/に/行き&#8221;, &#8220;に/行き/たい&#8221;, &#8220;行き/たい/。&#8221;<br/>
となる。</li>
</ul>
</li>
</ul>


<h2>文章を生成する際のポイント</h2>

<ol>
<li>要素の単位

<ul>
<li>文字単位でマルコフ連鎖を行う場合もあるが、単語単位で生成したほうが読みやすい文章になる。N-gramのNが大きくなれば、長文になりやすく、同じパターンのものが生成されやすい。解決するためにはデータ量を増やす必要がある。個人的にいい意味で人工無脳っぽさが出るは単語bi-gramかtri-gramあたりだと思う。</li>
</ul>
</li>
<li>開始・終了の扱い

<ul>
<li>開始、終了にも適当な目印を割り当てると楽。<code>[S]/私/は/旅行/に/行き/たい/。/[E]</code>のように。単語[S]から作り始めて、単語[E]が現れたら終了。</li>
</ul>
</li>
<li>元データの選択

<ul>
<li>◯◯っぽいものを作りたい場合は◯◯っぽい文章を集めてくる。とりあえず試してみたい場合のデータ収集元としておすすめなのはTwitterやネットのニュースあたり。この辺りを元データにしたものは<a href="https://twitter.com/shuumai">しゅうまい君</a>や<a href="http://pha22.net/comp/">圧縮新聞</a>なんかが有名ですね。</li>
</ul>
</li>
</ol>


<h2>プログラム</h2>

<p>という訳で、Raspberry Pi + LCD で動くものを実装してみました(<a href="https://github.com/Salinger/MunouChan-onRaspberryPi">MunouChan</a>)。文章生成に使用したのは友人のTweet。<code>@~</code> から始まるリプライツイートは削除しました。各単語はMeCabで分割し単語の読みに変換(最終出力が半角カナのみなので)。単語の読みのみを考慮して(火と日は&#8221;ひ&#8221;で同一単語扱い)bi-gramの単語ペアを生成。ペアの出現回数をカウント。次に現れる単語の確率を計算したものをpickleモジュールでダンプしたものが上記URLのプログラムの状態です。</p>

<p>後はプログラム起動時にダンプされたデータを読み込み、開始単語から終了単語が現れるまで確率に従いランダムに単語を選択。LCDに収まる文字数ならLCDに出力し、オーバーしていたら再生成。</p>

<p><code>./probability.pkl</code>を削除またはリネームし、tweetディレクトリの中のsample.tsvを同じ形式で書き換えてやれば、任意の元データでも動くはず。ただ元データに文字数が多いものばかりを選ぶと、制限文字数をオーバしまくるので怪しい動作しそう。</p>

<p>実行したときの画像がこのページトップあたりにある画像です。</p>

<h2>まとめ</h2>

<p>シンプルな人工無脳を作るのはさほど難しくないが、人間らしい応答をさせようとすると難易度が跳ね上がる。そもそも「人間らしい」という定義すらよくわからない。</p>

<p>これはマルコフ連鎖を文章に適用した例だけど、状態の遷移を確率的に表現できるものに適用できるので、音楽や絵の自動生成など、他分野にもいろいろ適用できるはず。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspberry PiとキャラクタLCDで遊んでみた]]></title>
    <link href="http://Salinger.github.com/blog/2013/01/25/1/"/>
    <updated>2013-01-25T16:46:00+09:00</updated>
    <id>http://Salinger.github.com/blog/2013/01/25/1</id>
    <content type="html"><![CDATA[<p>せっかくGPIOがあるんだから、ここに何かをくっつけて遊んでみたくなった。という訳で、キャラクタLCDを接続してみました。Raspberry Piの電源はGPIOへ直接入力してます。</p>

<p><img src="http://Salinger.github.com/images/2013-01-25/LCD.jpg" alt="Raspberry Pi 画像" /></p>

<!-- more -->


<h2>用意したもの</h2>

<p><a href="http://akizukidenshi.com/catalog/default.aspx">秋月電子</a>で以下のものを購入。
・SD1602HUOB 16x2 キャラクタLCD x 1
・GF12-US0520 5V2A ACアダプタ x 1
・半固定抵抗器 50Ω x 1
・ピンソケット (メス) 2x13 (26P) x 1
・ブレッドボード用DCジャックDIP化キット x 1
・トグルスイッチ3P x 1
・ユニバーサル基板 (両面スルーホール) 72x47 x 1</p>

<p>合計して約2000円。配線は以前からの余りを流用。</p>

<h2>LCD用基板の作成</h2>

<p>今回使用したLCDはHD44780の互換品なので以下の作業は<a href="http://www.raspberrypi-spy.co.uk/2012/07/16x2-lcd-module-control-using-python/">このページ</a>を参考にして行いました。</p>

<p>GPIOとLCDのピンの接続は、基本的に参考ページの通りに接続。基本的には問題ないのですが、注意点が１つ。参考サイトではLCDの3番ピン(Contrast)がGNDに接続されてますが、今回使用したキャラクタLCDはここに可変抵抗器を入れないと、コントラストの関係で液晶に四角い塊が出力される状態になる(斜めから見るとギリギリ文字が読める)。可変抵抗器で分圧してやれば、コントラストの調節ができるようになり、無事文字が読めるようになりました。</p>

<p>また、Raspberry Piには電源スイッチがないので、電源ON/OFFのためのスイッチも追加しました。これでリセット時にACアダプタを抜き差しする必要がなくなった。</p>

<h2>LCD出力用のプログラム</h2>

<p>参考用ページにアルファベットを出力するための、Pythonのプログラムがあったが、日本語(半角カナ・記号)をLCDに出力するために少々書き換えました。GPIO用のモジュール:RPi.GPIO はeasy_installやpipで適当にインストールしてください。<br/>
Github:<a href="https://github.com/Salinger/Raspberry-Pi-LCD-HD44780">Raspberry-Pi-LCD-HD44780</a><br/>
このプログラムを使えば、日本語（ひらがな・カタカナ・一部記号）とアルファベットの混じった文字列ををunicodeで渡してやれば、いい感じに変換して出力してくれます。この記事TOPの画像は、このプログラムを動かしたときのものです。</p>

<p>実行する際の注意点として、このプログラムはroot権限で動かす必要があります(GPIO使う場合は必須なのか？)。</p>

<pre><code>$ sudo python lcd.py
</code></pre>

<h2>まとめ</h2>

<p>これで文字列を生成するPythonのプログラムから、自由にLCDへ出力できるようになりました。電源はRaspberry PiとLCDどちらもACアダプタからの入力で動作します。あと地味に電源スイッチが便利です。次はPythonで文字列を生成するプログラムを書いてこいつに乗っけます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Laspberry Piについて]]></title>
    <link href="http://Salinger.github.com/blog/2013/01/24/1/"/>
    <updated>2013-01-24T14:39:00+09:00</updated>
    <id>http://Salinger.github.com/blog/2013/01/24/1</id>
    <content type="html"><![CDATA[<p>今回は<a href="http://www.raspberrypi.org">Raspberry Pi</a>の紹介をしたいと思います。Raspberry PiはARMプロセッサを搭載したシングルボードコンピュータです。</p>

<p><img src="http://Salinger.github.com/images/2013-01-24/R0012199.jpg" alt="Raspberry Pi 画像" /></p>

<!-- more -->


<h2>ハードウェアの仕様</h2>

<p>以下簡単なハードウェア仕様のまとめ。</p>

<table>
<thead>
<tr>
<th></th>
<th><strong>モデル</strong></th>
<th><strong>Model A</strong></th>
<th><strong>Model B</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>価格</td>
<td>$25</td>
<td>$35</td>
</tr>
<tr>
<td></td>
<td>CPU</td>
<td>ARM11 ARM1176JZF-S core</td>
<td>同じ</td>
</tr>
<tr>
<td></td>
<td>メモリ</td>
<td>256 MB</td>
<td>512 MB</td>
</tr>
<tr>
<td></td>
<td>GPU</td>
<td>Broadcom VideoCore IV,OpenGL ES 2.0, OpenVG 1080p30 H.264 high-profile encode/decode</td>
<td>同じ</td>
</tr>
<tr>
<td></td>
<td>ストレージ</td>
<td>SDメモリーカード / MMC / SDIO カードスロット</td>
<td>同じ</td>
</tr>
<tr>
<td></td>
<td>USB2.0</td>
<td>1ポート</td>
<td>2ポート</td>
</tr>
<tr>
<td></td>
<td>ビデオ出力</td>
<td>コンポジット(RCA) / HDMI</td>
<td>同じ</td>
</tr>
<tr>
<td></td>
<td>音声出力</td>
<td>3.5mmジャック / HDMI</td>
<td>同じ</td>
</tr>
<tr>
<td></td>
<td>LAN</td>
<td>なし</td>
<td>10/100M 有線Ethernet</td>
</tr>
<tr>
<td></td>
<td>その他インターフェイス</td>
<td>GPIO / SPI / UART</td>
<td>同じ</td>
</tr>
<tr>
<td></td>
<td>電源</td>
<td>500 mA</td>
<td>700 mA</td>
</tr>
<tr>
<td></td>
<td>電源ソース</td>
<td>5V MicroUSB Type B or GPIO</td>
<td>同じ</td>
</tr>
<tr>
<td></td>
<td>サイズ</td>
<td>85.60 mm ×53.98mm</td>
<td> 同じ</td>
</tr>
</tbody>
</table>


<h2>ソフトウェア</h2>

<p>OSはDebian(wheezy)ベースのもの、Arch Linux、RISC OSなどが動きます。ダウンロードは<a href="http://www.raspberrypi.org/downloads">ここ</a>から。</p>

<h2>購入先</h2>

<p><a href="http://jp.rs-online.com/web/generalDisplay.html?id=raspberrypi">ここ</a>で購入しました。私が入手した際は1ヶ月以上待ちましたが、今はどうなってるのやら。</p>

<h2>インストール</h2>

<p>書き込み作業の際、ディスクの指定を誤るとシステムデータが飛ぶ可能性があるので、気をつけてください。</p>

<h3>OSのダウンロード</h3>

<p>インストールするOSのイメージを上記のページからダウンロードしておきます。今回はDebianベースのRaspbian &#8220;wheezy&#8221;(2012-12-16-wheezy-raspbian.zip) を利用しました。<code>~/Downloads/</code> (デフォルトのダウンロードフォルダ)に保存しておきます。</p>

<h3>SDカードの準備</h3>

<p>OSをインストールするためのSDカードを用意します。OS自体は2GB程度なので、最低4GB程度の容量があれば大丈夫ですが、色々とソフトをインストールする場合を考えると、8GB程度あれば問題ないと思います。インストールの際、カード内の全データが消去されます。</p>

<h3>SDカードへの書き込み。</h3>

<p>今回はMacOSXで作業しました。Unix系のOSならおそらくほぼ同じ方法でできるはず。最初にSDカードのデバイス名を調べます。SDカードを接続する前に、以下のコマンドを実行します。</p>

<pre><code>$ df -h
</code></pre>

<p>次にSDカード接続後に同じコマンドを実行します。私の環境の場合、SDカード名は<code>/dev/disk1s1</code>になっていました。次にSDカードをアンマウントします。</p>

<pre><code>$ umount /dev/disk1s1
</code></pre>

<p>ダウンロードしたOSのイメージがあるところへ移動し、ddコマンドを実行。この際、デバイスの指定は<code>/dev/disk1s1</code> => <code>/dev/rdisk1</code>のようにrawデバイスを指定します。</p>

<pre><code>$ cd ~/Downloads
$ dd sudo time dd bs=1m if=2012-12-16-wheezy-raspbian.img of=/dev/rdisk1
</code></pre>

<p>これでOSの入ったSDカードの準備ができた。</p>

<h3>起動</h3>

<p>Raspberry Piに先ほど準備したSDカード、モニタ、キーボード、LAN、その他デバイスを接続し、USBポートまたはGPIOから電源を供給して起動します。電源供給と同時に起動するので、電源の接続は最後にしてください<br/>
初回のみ、設定画面が表示されます。項目は以下の通りです。</p>

<p>・info<br/>
　　このツールの情報の確認。スルーして問題なし。<br/>
・expand_rootfs<br/>
　　デフォルトではSDカードのうち2GB程度しか使用していません。<br/>
　　全領域を使用するようにここで設定出来ます。設定後、要再起動。<br/>
・overscan<br/>
　　テレビに出力する場合、画面周囲がきちんと表示されない場合があります。<br/>
　　その際、ここで周囲に余白を設定することで、正常に表示できるようになります。<br/>
・configure_keyboard<br/>
　　キーボードの配列の設定。<br/>
　　日本語配列、US配列、使用しているキーボードに合わせて設定。<br/>
・change_pass<br/>
　　デフォルトのユーザである&#8217;pi&#8217; ユーザのパスワードの変更。<br/>
　　自分のパスワードに変更しておくべき。<br/>
・change_locale<br/>
　　ロケールの設定。<br/>
　　日本語フォントが入っていないので、UTF-8に設定しても日本語は文字化けする。<br/>
　　とりあえずデフォルトのままで問題ない。<br/>
・change_timezone<br/>
　　時間の設定。日本は&#8221;Asia&#8221;の&#8221;Tokyo&#8221;を指定すればよい。<br/>
・memory_split<br/>
　　GPUどれだけメモリを割り当てるか。通常はデフォルトのままで問題ない。<br/>
・ssh<br/>
　　sshを利用してリモートログインする場合&#8221;Enable&#8221;を指定。<br/>
　　設定しておけば別マシンから開発できる。<br/>
・boot_behaviour<br/>
　　&#8221;Yes&#8221;を選択すれば、最初からGUIな画面で起動する。<br/>
　　CUIで起動して、startxするのが面倒くさいなら&#8221;Yes&#8221;に。<br/>
・update<br/>
　　この設定用ツール raspi-config のアップデート。</p>

<p>これで最低限の設定は終わりです。もし、再設定したいならコンソールから</p>

<pre><code>$ sudo raspi-config
</code></pre>

<p>を実行することで、いつでも再設定出来ます。</p>

<h2>使用した感想</h2>

<p>私が買ったのは$35のモデルです。<br/>
想像以上に高性能です。コンソールから使う分には特に不満なし。<br/>
軽い開発なら実機のみでそれなりにできそう。<br/>
低消費電力なのでサーバー用途に良さそう。<br/>
GPIO / オーディオ出力 などいろいろ遊べそう。<br/>
なかなか遊びがいのあるおもちゃですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Homebrew + virtualenv 環境でlibsvmのインストール]]></title>
    <link href="http://Salinger.github.com/blog/2013/01/18/1/"/>
    <updated>2013-01-18T02:42:00+09:00</updated>
    <id>http://Salinger.github.com/blog/2013/01/18/1</id>
    <content type="html"><![CDATA[<p>サポートベクターマシン(SVM)についての概要は <a href="http://ja.wikipedia.org/wiki/%E3%82%B5%E3%83%9D%E3%83%BC%E3%83%88%E3%83%99%E3%82%AF%E3%82%BF%E3%83%BC%E3%83%9E%E3%82%B7%E3%83%B3">Wikipedia</a> でも見てください。
スパムの分類、ユーザーのクラスタリング、他何か色々なものを分類する用途に使われます。今回はSVMを使うための環境構築を行った際のメモです。</p>

<!-- more -->


<h2>libsvmについて</h2>

<p><a href="http://www.csie.ntu.edu.tw/~cjlin/libsvm/">libsvm</a>はChih-Chung Changさん・Chih-Jen Linさんが開発したSVMのライブラリです。様々なSVMタイプ・カーネル関数、また細かくオプションも指定できるので、SVMを使う必要がある場合は、とりあえずこれを選んでおけば困ることは少ないと思います。</p>

<h2>libsvmのインストール</h2>

<pre><code>$ brew search libsvm
libsvm
</code></pre>

<p>brewにあった。ラッキー。</p>

<pre><code>$ brew install libsvm
</code></pre>

<p>本体のインストール完了。</p>

<pre><code>$ svm-train
Usage: svm-train [options] training_set_file [model_file]
options:
-s svm_type : set type of SVM (default 0)
        0 -- C-SVC              (multi-class classification)
...
</code></pre>

<p>動いた。がこれだとPython用バインディングがインストールできなかった。残念。</p>

<h2>libsvmのPython用バインディングのインストール</h2>

<p>無いなら、pipで公式のバインディングをインストールするためのsetup.pyを自分で書いてしまえばいいじゃない。てな訳で書いた奴をgithubに上げといた<a href="https://github.com/Salinger/libsvm-python">(libsvm-python)</a>。
問題はsetup.py書いたのが初めてなので、これであってるのかどうか自信がない。とりあえず以下のコマンドでインストールできます。</p>

<pre><code>$ pip install -e git+https://github.com/Salinger/libsvm-python.git#egg=libsvm-python
</code></pre>

<h2>動作確認</h2>

<p>テスト用のコード。</p>

<div><script src='https://gist.github.com/4579980.js'></script>
<noscript><pre><code>#!/usr/bin/env python                                                                                     
#-*- coding:utf-8 -*-                                                                                     

from svm import *
from svmutil import *

# For learning                                                                                            
t_label = [1,-1,1,-1]
t_data = [
    [1.0, 2.0, 3.0],
    [3.0, 1.5, 1.0],
    [2.0, 3.0, 4.0],
    [0.5, 1.0, 1.5]
    ]
problem = svm_problem(t_label, t_data)
parameter = svm_parameter('-s 0 -t 0')
t = svm_train(problem, parameter)

# For predict                                                                                             
p_label = [1, 1, -1, -1]
p_data = [
    [0.3, 0.9, 1.2],
    [2.0, 3.0, 4.5],
    [3.0, 1.0, 0.3],
    [1.0, 0.5, 0.25]
    ]
result = svm_predict(p_label, p_data , t)

print &quot;[Result]&quot;
for r in result:
    print r</code></pre></noscript></div>


<p>そして実行。</p>

<pre><code>$ python libsvm_test.py 
.*.*
optimization finished, #iter = 9
nu = 0.298326
obj = -0.596685, rho = 3.000257
nSV = 3, nBSV = 0
Total nSV = 3
Accuracy = 75% (3/4) (classification)
[Result]
[-1.0, 1.0, -1.0, -1.0]
(75.0, 1.0, 0.3333333333333333)
[[-1.3527684585781998], [3.038557720585867], [-1.9331234989121904], [-2.4115929900464406]]
</code></pre>

<p>問題なく動くのを確認できた。自分で書いたsetup.pyもとりあえず問題ないっぽい？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Homebrew + virtualenv 環境でMeCabのインストール]]></title>
    <link href="http://Salinger.github.com/blog/2013/01/17/1/"/>
    <updated>2013-01-17T18:40:00+09:00</updated>
    <id>http://Salinger.github.com/blog/2013/01/17/1</id>
    <content type="html"><![CDATA[<p>普段良く使うモジュールのMeCabのインストール。
Homebrewもvirutalenvも最近使い始めたばかりなので、自分用メモとして記録。</p>

<!-- more -->


<h2>virtualenv環境の作成</h2>

<p>普段はNormalという環境を作って、これを使うことにする。</p>

<pre><code>$ mkvirtualenv Normal
</code></pre>

<h2>MeCabのインストール</h2>

<pre><code>$ brew search mecab
mecab mecab-ipadic
</code></pre>

<p>Homebrewにあった。</p>

<pre><code>$ brew install mecab mecab-ipadic
$ mecab
</code></pre>

<p>これでこの時点の最新版である0.994とIPA辞書がインストールできた。動作確認。</p>

<pre><code>$ mecab
すもももももももものうち
すもも  名詞,一般,*,*,*,*,すもも,スモモ,スモモ
も      助詞,係助詞,*,*,*,*,も,モ,モ
もも    名詞,一般,*,*,*,*,もも,モモ,モモ
も      助詞,係助詞,*,*,*,*,も,モ,モ
もも    名詞,一般,*,*,*,*,もも,モモ,モモ
の      助詞,連体化,*,*,*,*,の,ノ,ノ
うち    名詞,非自立,副詞可能,*,*,*,うち,ウチ,ウチ
EOS
</code></pre>

<p>Ctrl + c で終了。
文字コード周りのトラブルも特になし。</p>

<h2>MeCabのPythonバインディングのインストール</h2>

<p>MacPortsのときはPythonバインディングもまとめてインストールできたが、Homebrewには無いっぽい。まあvirtualenvで作った環境にインストールするには結局自分で入れなきゃならないらしいので、普通にインストールすることにする。インストール先のvirtualenv環境のまま作業続行。</p>

<pre><code>$ cd ~/Downloads/
$ curl -O http://mecab.googlecode.com/files/mecab-python-0.994.tar.gz # 同じバージョンのものをダウンロード
$ pip install mecab-python-0.994.tar.gz # tar.gz のままインストールできる。
</code></pre>

<p>動作確認を行う。</p>

<h2>Pythonバインディングの動作確認</h2>

<p>サンプルコード</p>

<div><script src='https://gist.github.com/4555097.js'></script>
<noscript><pre><code>#!/usr/bin/env python                                                                                                                                           
#-*- coding:utf-8 -*-                                                                                                                                           
import MeCab

m = MeCab.Tagger(&quot;-Ochasen&quot;)
string = u&quot;それサバンナでも同じ事言えんの？&quot;

# MeCabでUnicode文字列を扱う場合は、一度エンコードする必要がある。                                                                                              
# この際、                                                                                                                                                      
# node = tagger.parseToNode(string.encode(&quot;utf-8&quot;))                                                                                                             
# とすると、stringがパース中にガベコレされてしまって、                                                                                                          
# 変な挙動になる場合があるので注意。このように一度変数に代入すれば問題ない。                                                                                    
string = string.encode(&quot;utf-8&quot;)
node = m.parseToNode(string)

# ノードを順番にたどる。                                                                                                                                        
# node.surface, node.feature はstr型なので、                                                                                                                    
# この時点でunicode型に変換する方がトラブル防止のためにはいいかも。                                                                                             
while node:
    print node.surface, node.feature
    node = node.next

</code></pre></noscript></div>


<p>実行。</p>

<pre><code>$ python mecab_test.py
 BOS/EOS,*,*,*,*,*,*,*,*
それ 名詞,代名詞,一般,*,*,*,それ,ソレ,ソレ
サバンナ 名詞,一般,*,*,*,*,サバンナ,サバンナ,サバンナ
で 助詞,格助詞,一般,*,*,*,で,デ,デ
も 助詞,係助詞,*,*,*,*,も,モ,モ
同じ 連体詞,*,*,*,*,*,同じ,オナジ,オナジ
事 名詞,非自立,一般,*,*,*,事,コト,コト
言え 動詞,自立,*,*,一段,未然形,言える,イエ,イエ
ん 助動詞,*,*,*,不変化型,基本形,ん,ン,ン
の 助詞,終助詞,*,*,*,*,の,ノ,ノ
？ 記号,一般,*,*,*,*,？,？,？
 BOS/EOS,*,*,*,*,*,*,*,*
</code></pre>

<p>動いた。</p>

<h2>おまけ</h2>

<p>今回はgistで書いたコードをブログに貼ってみたけど、</p>

<pre><code>{% gist 4555097 %}
</code></pre>

<p>の1行で長いコードを見やすい形式で貼れるのってかなり便利だ。
Github + Octopress 快適すぎる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Macでvirtualenvの設定]]></title>
    <link href="http://Salinger.github.com/blog/2013/01/16/2/"/>
    <updated>2013-01-16T17:41:00+09:00</updated>
    <id>http://Salinger.github.com/blog/2013/01/16/2</id>
    <content type="html"><![CDATA[<p>virtualenvはPython用の仮想環境構築のためのモジュール。virtualenvwrapperはvirtualenvを楽に使うためのラッパー。とりあえずPython周りの環境は、基本的にPython自体をHomebrewで、モジュールはvirtualenv + virtualenvwrapper + pip で管理することにする。</p>

<!-- more -->


<h2>Pythonのインストール</h2>

<p>必要な物をHomebrewでインストール。</p>

<pre><code>$ python -V
Python 2.7.2 # Macに標準で入ってるPython
$ brew install readline sqlite gdbm
$ brew install python --universal --framework
$ python -V
Python 2.7.2
</code></pre>

<p>あれっ？変化なし？
bashだとPathは問題なく2.7.3が起動したけど、普段使ってるtmux + zshだと2.7.2が起動した。.zshrcに以下のようにPathの記述をする必要あり。</p>

<pre><code>export PATH=/usr/local/bin:/usr/local/sbin:/sbin:/usr/sbin:${PATH}
</code></pre>

<p>.zshrcの再読み込み</p>

<pre><code>$ source .zshrc
$ python -V
Python 2.7.3
</code></pre>

<p>これでPython2系最新版のインストールはOK。</p>

<h2>virtualenvとvirtualenvwrapperのインストール</h2>

<pre><code>$ which pip # インストール先の確認
/usr/local/bin/pip # Homebrewでインストールした先になっているのを確認
$ pip install virtualenv
$ pip install virtualenvwrapper
$ mkdir ~/.virtualenvs
</code></pre>

<p>.zshrcに</p>

<pre><code>#virtualenv settings
export WORKON_HOME=$HOME/.virtualenvs
. /usr/local/share/python/virtualenvwrapper.sh
</code></pre>

<p>を記述。</p>

<pre><code>$ source .zshrc # リロード
virtualenvが見えない…
</code></pre>

<p>.zshrcに</p>

<pre><code>export PATH=/usr/local/share/python:${PATH}
</code></pre>

<p>を追記。</p>

<pre><code>$ source .zshrc
</code></pre>

<p>問題解決。</p>

<h2>テスト</h2>

<pre><code>$ pip freeze # 現在のモジュールの確認 (virtualenvなど)
$ mkvirtualenv test1 # test1という環境を作成
$ deactivate #環境から抜ける
$ mkvirtualenv test2 # test2という環境を作成
$ workon # 環境の一覧を確認
test1
test2
$ workon test1 # testを選択
$ pip install numpy # test1 にnumpyをインストール
$ pip freeze # nuupyのインストールを確認
$ deactivate 
$ pip freeze # 元の環境に影響がないのを確認
$ rmvirtualenv test1 # テスト環境を削除
$ rmvirtualenv test2
$ workon # 出力なし 削除完了
</code></pre>

<p>動作確認完了。モジュールの切り替えが非常に楽なので、今後の開発が捗りそう。</p>

<h2>Octopressとzshのトラブル？</h2>

<p>この記事を書こうとして、</p>

<pre><code>$ rake new_post["2"]
</code></pre>

<p>を実行したら、</p>

<pre><code>$ zsh: no matches found: new_post["2"]
</code></pre>

<p>というエラーが。何故だ？しかし、</p>

<pre><code>$ rake new_post
$ Enter a post title:2
</code></pre>

<p>作成できたぞ？今回Pathを弄ったのが原因か？<br/>
この辺の動作がよくわからんので。また確認しとかないと。</p>

<h3>追記</h3>

<p>.zshrcに</p>

<pre><code>alias rake="noglob rake"
</code></pre>

<p>を追記したらエラー消えました。ありがとうございます > shogo82148 。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[homebrew環境の構築]]></title>
    <link href="http://Salinger.github.com/blog/2013/01/16/1/"/>
    <updated>2013-01-16T02:41:00+09:00</updated>
    <id>http://Salinger.github.com/blog/2013/01/16/1</id>
    <content type="html"><![CDATA[<p>Macbook Airの環境を再構築したので、その際のメモ。今まではパッケージ管理にMacPortsを使っていたが、今回からHomebrewに移行した。元からMountain LionにインストールされてるPythonやRubyと、パッケージ管理ソフトで導入したそれらの最新版の管理がMacPortsだと少々面倒くさかったので、もう少し楽に済みそうなものを使ってみようというのが理由だ。</p>

<!-- more -->


<h2>Homebrewのインストール</h2>

<p>以下のコマンドを実行。</p>

<pre><code>$ ruby -e "$(curl -fsSkL raw.github.com/mxcl/homebrew/go)"
$ brew doctor
</code></pre>

<p>gitのインストール。</p>

<pre><code>$ brew install git
</code></pre>

<p>Homebrewのアップデート。</p>

<pre><code>$ brew update
</code></pre>

<p><code>/usr/local/sbin</code>の作成。</p>

<pre><code>$ mkdir /usr/local/sbin
</code></pre>

<p>Pathを設定するため<code>/etc/paths</code>の編集。</p>

<pre><code>/usr/bin
/bin
/usr/sbin
/sbin
/usr/local/bin
</code></pre>

<p>となっているのを、</p>

<pre><code>/usr/local/bin
/usr/bin
/bin
/usr/sbin
/usr/local/sbin
/sbin
</code></pre>

<p>と変更。これでHomebrewでインストールした方が優先される。
ターミナルを再起動してとりあえずの設定は終わり。</p>

<h2>Ruby1.9.3のインストール</h2>

<p>とりあえずこのブログを編集するためのRuby環境構築。</p>

<pre><code>$ brew install ruby
$ gem install bundler
</code></pre>

<p>このBlogのデータを<code>git clone</code>で作業用ディレクトリに持ってきて、そのディレクトに移動。そこで、</p>

<pre><code>$ bundle install
</code></pre>

<p>を実行しようとしたら、bundleコマンドが見当たらないぞ？次のコマンドを実行すれば良かった。</p>

<pre><code>$ brew unlink ruby
$ brew link ruby
</code></pre>

<h2>おわりに</h2>

<p>こんな感じでBlogを更新するための環境の再構築はとりあえず終了。MacPortsの時に面倒だったRubyとGemのバージョン指定周りも特に気にする必要はなかった。早くPythonの環境も整えないと。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac + Ruby + Octopress + Github でブログの作成]]></title>
    <link href="http://Salinger.github.com/blog/2013/01/14/1/"/>
    <updated>2013-01-14T22:22:00+09:00</updated>
    <id>http://Salinger.github.com/blog/2013/01/14/1</id>
    <content type="html"><![CDATA[<p>技術系の話をメモするためのブログを作ろうと思っていたところ、このようなものを発見<a href="http://octopress.org">Octopress</a>。コードの管理に普段からGithubを使ってるので、技術系の話はすべてGithub上に集約してしまおう、という試み。以下SSHKeyの登録などGithubの設定はひと通り終わってる前提で話を進めています。</p>

<!-- more -->


<h2>環境</h2>

<p>PC: MacBook Air, Core i5 1.7GHz, Mem 4GB<br/>
OS: OS X 10.8.2<br/>
XCode: 4.5.2</p>

<h2>Rubyのインストール</h2>

<p>1.9.3が入ってればいいらしいので、MacPortsを使ってインストール。</p>

<pre><code>$ sudo port install ruby19 +nosuffix
</code></pre>

<p>bundle のインストール (とりあえずgem1.9を使えば問題はなかった。gem だと標準でインストールされている1.8系にインストールされるのか？試していないので分からないが)。</p>

<pre><code>$ sudo gem1.9 install bundle
</code></pre>

<h2>Octopressのインストール</h2>

<pre><code>$ cd ~/Downloads/
$ git clone https://github.com/imathis/octopress.git
$ cd octopress
$ bundle install
$ rake install
</code></pre>

<h2>Github Pagesの準備</h2>

<p>Github Pagesを利用するために、username.github.com というような名前でリポジトリを作成。<a href="https://github.com/repositories/new">ここ</a>で私の場合はsalinger.github.comという名前で作成した。→のGithub Reposに見えてるかな？</p>

<h2>Octpress のデプロイ設定</h2>

<pre><code>$ rake setup_github_pages
</code></pre>

<p>ここでgit@github.com:Salinger/salinger.github.com.git を入力。</p>

<pre><code>$ rake generate
$ rake deploy
</code></pre>

<p>この2行をまとめて実行する場合には</p>

<pre><code>$ rake gen_deploy
</code></pre>

<p>で可能。</p>

<h2>Github コミット</h2>

<pre><code>$ git add . &amp;&amp; git commit -m "Initial commit"
$ git push
</code></pre>

<h2>初期設定</h2>

<p><a href="http://change-the-world.github.com/blog/2012/08/26/1/">ここ</a>を見ながら_config.ymlを弄って初期設定。Github,Twitterとの連携も簡単にできる。</p>

<h2>新規記事作成</h2>

<pre><code>$ rake new_post["1"]
</code></pre>

<p>sourse/_posts/以下に新しい記事のテンプレートが作成される。
<a href="http://ja.wikipedia.org/wiki/Markdown">Wikipedia:Markdown</a>
を見ながら、テストがてらこの記事を作成してみた。
なおデプロイする前に</p>

<pre><code>$ rake generate
$ rake preview
</code></pre>

<p>を実行すると、http://localhost:4000でプレビューが見れる。</p>

<pre><code>$ rake deploy
$ git add . &amp;&amp; git commit -m "Create octopress install page."
$ git push
</code></pre>

<h2>コメント欄の追加</h2>

<p>記事にコメント欄を追加するには、<a href="http://disqus.com/">Disqus</a>に登録しなければならないっぽいので登録した。<a href="http://blog.morizotter.com/octopress%E3%81%AB%E3%82%B3%E3%83%A1%E3%83%B3%E3%83%88%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B/">このページ</a>を見つつ_config.ymlに設定を記述した。</p>

<h2>サイドバーにプロフィール欄を追加</h2>

<p><a href="http://www.mk-mode.com/octopress/2012/12/17/octopress-add-profile/">ここ</a>を参考にしました。<code>source/_includes/custom/asides/about.html</code> を編集（中身はただのHTML）。サイドバーの表示設定を変更するために_config.ymlを編集。</p>

<pre><code>default_asides: [...]
</code></pre>

<p>の中の任意の位置にcustom/asides/about.htmlを追加する。genereteしてdeployすればプロフィールがサイドバーに表示されるはず。</p>

<h2>感想</h2>

<p>ちょこちょこ弄ってみた感想ですが、<br/>
1. Githubとの連携が良い感じ。<br/>
2. Markdown記法なかなか書きやすい。普段使ってるEmacsで書けるのはありがたい。<br/>
3. 2とも関連するが、作業中にエディタ内でシームレスに書けるのは非常に楽。<br/>
静的なページでいいなら、レンタルサーバ借りるよりもこっちの方がいいかも。</p>
]]></content>
  </entry>
  
</feed>
