<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: RaspberryPi | さりんじゃーのプログラミング日記]]></title>
  <link href="http://Salinger.github.com/blog/categories/raspberrypi/atom.xml" rel="self"/>
  <link href="http://Salinger.github.com/"/>
  <updated>2013-01-27T23:02:02+09:00</updated>
  <id>http://Salinger.github.com/</id>
  <author>
    <name><![CDATA[Salinger]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Raspberry Piに人工無能搭載してみた]]></title>
    <link href="http://Salinger.github.com/blog/2013/01/27/1/"/>
    <updated>2013-01-27T00:09:00+09:00</updated>
    <id>http://Salinger.github.com/blog/2013/01/27/1</id>
    <content type="html"><![CDATA[<p>前回の記事に引き続きRaspberry Piネタ。マルコフ連鎖により文章を自動生成しLCDに出力してみた。</p>

<p><img src="/images/2013-01-27/001.png" alt="出力例の画像" /></p>

<!--more-->


<h2>人工無能とは</h2>

<p>考えてるように見えて考えてない。ただ確率に従い文章を生成するプログラム。それでも人間から見ると、意味のある文章に見える文章が生成される。</p>

<p>基本的な生成手順は</p>

<ol>
<li>元データを形態素解析して形態素毎に分割</li>
<li>マルコフ連鎖により再構成</li>
</ol>


<h2>形態素解析</h2>

<p>自然言語で書かれた文を、形態素 (言語で意味を持つ最小単位) ごとに分割し、各形態素の品詞を特定することを形態素解析と呼ぶ。プログラムで自然言語を扱う場合、よく使われる技術の一つ。細かいことは<a href="http://ja.wikipedia.org/wiki/%e5%bd%a2%e6%85%8b%e7%b4%a0%e8%a7%a3%e6%9e%90">Wikipedia</a> でも見てください。</p>

<p>日本語の形態素解析を行うためのツールは以下の様なものがある。</p>

<ul>
<li><a href="http://mecab.sourceforge.net/">MeCab</a>

<ul>
<li>bi-gram マルコフモデル</li>
<li>学習モデルはCRF</li>
</ul>
</li>
<li><a href="http://chasen-legacy.sourceforge.jp">ChaSen</a>

<ul>
<li>可変長マルコフモデル</li>
<li>学習モデルは隠れマルコフモデル(HMM)</li>
</ul>
</li>
<li><a href="http://www.phontron.com/kytea/index-ja.html">KyTea</a>

<ul>
<li>比較的最近でてきたもの</li>
<li>ネットスラングや顔文字などの認識も比較的精度がいいらしい</li>
</ul>
</li>
<li><a href="http://developer.yahoo.co.jp/webapi/jlp/ma/v1/parse.html">日本語形態素解析Webサービス</a>

<ul>
<li>Webベースの日本語形態素解析API</li>
<li>組み込み系などマシンが非力な場合にも使えそう</li>
</ul>
</li>
</ul>


<p>今回は使い慣れているMeCabを使いました。</p>

<h2>マルコフ連鎖</h2>

<p>すごく簡単に言うと、ある要素を次々と発生させる状況を考えたときに、次の要素が現在の要素のみによって決まるのがマルコフ連鎖である。詳しくは<a href="http://ja.wikipedia.org/wiki/%e3%83%9e%e3%83%ab%e3%82%b3%e3%83%95%e9%80%a3%e9%8e%96">Wikipedia</a>でも見てください。</p>

<p>これを文章に適用した場合の例だが、解説はこのページがわかりやすい(<a href="https://www.evernote.com/shard/s70/sh/71947f67-ee6c-405f-92a2-1d64fd631639/2d9397138827808cbc21c36c9389f642">「それが大事」にマルコフ連鎖を適用してみる</a>)。</p>

<p>ある単語があったとき、その単語の次に現れる可能性のある単語の確率のみを考える場合を単語uni-gramのマルコフ連鎖、2単語ずつをペアにして考える場合を単語bi-gramのマルコフ連鎖、さらに続いてtri-gram、4-gram、…N-gram。と呼ぶ。</p>

<p>例えば、<br/>
私/は/旅行/に/行き/たい/。<br/>
という文章があった場合、</p>

<ul>
<li>単語uni-gram:

<ul>
<li>"私", "は", "旅行", "に", "行き", "たい", "。"</li>
</ul>
</li>
<li>単語bi-gram:

<ul>
<li>"私/は", "は/旅行", "旅行/に", "に/行き", "行き/たい", "たい/。"</li>
</ul>
</li>
<li>単語tri-gram:

<ul>
<li>"私/は/旅行", "は/旅行/に", "旅行/に/行き", "に/行き/たい", "行き/たい/。"<br/>
となる。</li>
</ul>
</li>
</ul>


<h2>文章を生成する際のポイント</h2>

<ol>
<li>要素の単位

<ul>
<li>文字単位でマルコフ連鎖を行う場合もあるが、単語単位で生成したほうが読みやすい文章になる。N-gramのNが大きくなれば、長文になりやすく、同じパターンのものが生成されやすい。解決するためにはデータ量を増やす必要がある。個人的にいい意味で人工無能っぽさが出るは単語bi-gramかtri-gramあたりだと思う。</li>
</ul>
</li>
<li>開始・終了の扱い

<ul>
<li>開始、終了にも適当な目印を割り当てると楽。<code>[S]/私/は/旅行/に/行き/たい/。/[E]</code>のように。単語[S]から作り始めて、単語[E]が現れたら終了。</li>
</ul>
</li>
<li>元データの選択

<ul>
<li>◯◯っぽいものを作りたい場合は◯◯っぽい文章を集めてくる。とりあえず試してみたい場合のデータ収集元としておすすめなのはTwitterやネットのニュースあたり。この辺りを元データにしたものは<a href="https://twitter.com/shuumai">しゅうまい君</a>や<a href="http://pha22.net/comp/">圧縮新聞</a>なんかが有名ですね。</li>
</ul>
</li>
</ol>


<h2>プログラム</h2>

<p>という訳で、Raspberry Pi + LCD で動くものを実装してみました(<a href="https://github.com/Salinger/MunouChan-onRaspberryPi">MunouChan</a>)。文章生成に使用したのは友人のTweet。<code>@~</code> から始まるリプライツイートは削除しました。各単語はMeCabで分割し単語の読みに変換(最終出力が半角カナのみなので)。単語の読みのみを考慮して(火と日は"ひ"で同一単語扱い)bi-gramの単語ペアを生成。ペアの出現回数をカウント。次に現れる単語の確率を計算したものをpickleモジュールでダンプしたものが上記URLのプログラムの状態です。</p>

<p>後はプログラム起動時にダンプされたデータを読み込み、開始単語から終了単語が現れるまで確率に従いランダムに単語を選択。LCDに収まる文字数ならLCDに出力し、オーバーしていたら再生成。</p>

<p><code>./probability.pkl</code>を削除またはリネームし、tweetディレクトリの中のsample.tsvを同じ形式で書き換えてやれば、任意の元データでも動くはず。ただ元データに文字数が多いものばかりを選ぶと、制限文字数をオーバしまくるので怪しい動作しそう。</p>

<p>実行したときの画像がこのページトップあたりにある画像です。</p>

<h2>まとめ</h2>

<p>シンプルな人工無能を作るのはさほど難しくないが、人間らしい応答をさせようとすると難易度が跳ね上がる。そもそも「人間らしい」という定義すらよくわからない。</p>

<p>これはマルコフ連鎖を文章に適用した例だけど、状態の遷移を確率的に表現できるものに適用できるので、音楽や絵の自動生成など、他分野にもいろいろ適用できるはず。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspberry PiとキャラクタLCDで遊んでみた]]></title>
    <link href="http://Salinger.github.com/blog/2013/01/25/1/"/>
    <updated>2013-01-25T16:46:00+09:00</updated>
    <id>http://Salinger.github.com/blog/2013/01/25/1</id>
    <content type="html"><![CDATA[<p>せっかくGPIOがあるんだから、ここに何かをくっつけて遊んでみたくなった。という訳で、キャラクタLCDを接続してみました。Raspberry Piの電源はGPIOへ直接入力してます。</p>

<p><img src="/images/2013-01-25/LCD.jpg" alt="Raspberry Pi 画像" /></p>

<!-- more -->


<h2>用意したもの</h2>

<p><a href="http://akizukidenshi.com/catalog/default.aspx">秋月電子</a>で以下のものを購入。
・SD1602HUOB 16x2 キャラクタLCD x 1
・GF12-US0520 5V2A ACアダプタ x 1
・半固定抵抗器 50Ω x 1
・ピンソケット (メス) 2x13 (26P) x 1
・ブレッドボード用DCジャックDIP化キット x 1
・トグルスイッチ3P x 1
・ユニバーサル基板 (両面スルーホール) 72x47 x 1</p>

<p>合計して約2000円。配線は以前からの余りを流用。</p>

<h2>LCD用基板の作成</h2>

<p>今回使用したLCDはHD44780の互換品なので以下の作業は<a href="http://www.raspberrypi-spy.co.uk/2012/07/16x2-lcd-module-control-using-python/">このページ</a>を参考にして行いました。</p>

<p>GPIOとLCDのピンの接続は、基本的に参考ページの通りに接続。基本的には問題ないのですが、注意点が１つ。参考サイトではLCDの3番ピン(Contrast)がGNDに接続されてますが、今回使用したキャラクタLCDはここに可変抵抗器を入れないと、コントラストの関係で液晶に四角い塊が出力される状態になる(斜めから見るとギリギリ文字が読める)。可変抵抗器で分圧してやれば、コントラストの調節ができるようになり、無事文字が読めるようになりました。</p>

<p>また、Raspberry Piには電源スイッチがないので、電源ON/OFFのためのスイッチも追加しました。これでリセット時にACアダプタを抜き差しする必要がなくなった。</p>

<h2>LCD出力用のプログラム</h2>

<p>参考用ページにアルファベットを出力するための、Pythonのプログラムがあったが、日本語(半角カナ・記号)をLCDに出力するために少々書き換えました。GPIO用のモジュール:RPi.GPIO はeasy_installやpipで適当にインストールしてください。<br/>
Github:<a href="https://github.com/Salinger/Raspberry-Pi-LCD-HD44780">Raspberry-Pi-LCD-HD44780</a><br/>
このプログラムを使えば、日本語（ひらがな・カタカナ・一部記号）とアルファベットの混じった文字列ををunicodeで渡してやれば、いい感じに変換して出力してくれます。この記事TOPの画像は、このプログラムを動かしたときのものです。</p>

<p>実行する際の注意点として、このプログラムはroot権限で動かす必要があります(GPIO使う場合は必須なのか？)。</p>

<pre><code>$ sudo python lcd.py
</code></pre>

<h2>まとめ</h2>

<p>これで文字列を生成するPythonのプログラムから、自由にLCDへ出力できるようになりました。電源はRaspberry PiとLCDどちらもACアダプタからの入力で動作します。あと地味に電源スイッチが便利です。次はPythonで文字列を生成するプログラムを書いてこいつに乗っけます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Laspberry Piについて]]></title>
    <link href="http://Salinger.github.com/blog/2013/01/24/1/"/>
    <updated>2013-01-24T14:39:00+09:00</updated>
    <id>http://Salinger.github.com/blog/2013/01/24/1</id>
    <content type="html"><![CDATA[<p>今回は<a href="http://www.raspberrypi.org">Raspberry Pi</a>の紹介をしたいと思います。Raspberry PiはARMプロセッサを搭載したシングルボードコンピュータです。</p>

<p><img src="/images/2013-01-24/R0012199.jpg" alt="Raspberry Pi 画像" /></p>

<!-- more -->


<h2>ハードウェアの仕様</h2>

<p>以下簡単なハードウェア仕様のまとめ。</p>

<table>
<thead>
<tr>
<th></th>
<th><strong>モデル</strong></th>
<th><strong>Model A</strong></th>
<th><strong>Model B</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>価格</td>
<td>$25</td>
<td>$35</td>
</tr>
<tr>
<td></td>
<td>CPU</td>
<td>ARM11 ARM1176JZF-S core</td>
<td>同じ</td>
</tr>
<tr>
<td></td>
<td>メモリ</td>
<td>256 MB</td>
<td>512 MB</td>
</tr>
<tr>
<td></td>
<td>GPU</td>
<td>Broadcom VideoCore IV,OpenGL ES 2.0, OpenVG 1080p30 H.264 high-profile encode/decode</td>
<td>同じ</td>
</tr>
<tr>
<td></td>
<td>ストレージ</td>
<td>SDメモリーカード / MMC / SDIO カードスロット</td>
<td>同じ</td>
</tr>
<tr>
<td></td>
<td>USB2.0</td>
<td>1ポート</td>
<td>2ポート</td>
</tr>
<tr>
<td></td>
<td>ビデオ出力</td>
<td>コンポジット(RCA) / HDMI</td>
<td>同じ</td>
</tr>
<tr>
<td></td>
<td>音声出力</td>
<td>3.5mmジャック / HDMI</td>
<td>同じ</td>
</tr>
<tr>
<td></td>
<td>LAN</td>
<td>なし</td>
<td>10/100M 有線Ethernet</td>
</tr>
<tr>
<td></td>
<td>その他インターフェイス</td>
<td>GPIO / SPI / UART</td>
<td>同じ</td>
</tr>
<tr>
<td></td>
<td>電源</td>
<td>500 mA</td>
<td>700 mA</td>
</tr>
<tr>
<td></td>
<td>電源ソース</td>
<td>5V MicroUSB Type B or GPIO</td>
<td>同じ</td>
</tr>
<tr>
<td></td>
<td>サイズ</td>
<td>85.60 mm ×53.98mm</td>
<td> 同じ</td>
</tr>
</tbody>
</table>


<h2>ソフトウェア</h2>

<p>OSはDebian(wheezy)ベースのもの、Arch Linux、RISC OSなどが動きます。ダウンロードは<a href="http://www.raspberrypi.org/downloads">ここ</a>から。</p>

<h2>購入先</h2>

<p><a href="http://jp.rs-online.com/web/generalDisplay.html?id=raspberrypi">ここ</a>で購入しました。私が入手した際は1ヶ月以上待ちましたが、今はどうなってるのやら。</p>

<h2>インストール</h2>

<p>書き込み作業の際、ディスクの指定を誤るとシステムデータが飛ぶ可能性があるので、気をつけてください。</p>

<h3>OSのダウンロード</h3>

<p>インストールするOSのイメージを上記のページからダウンロードしておきます。今回はDebianベースのRaspbian "wheezy"(2012-12-16-wheezy-raspbian.zip) を利用しました。<code>~/Downloads/</code> (デフォルトのダウンロードフォルダ)に保存しておきます。</p>

<h3>SDカードの準備</h3>

<p>OSをインストールするためのSDカードを用意します。OS自体は2GB程度なので、最低4GB程度の容量があれば大丈夫ですが、色々とソフトをインストールする場合を考えると、8GB程度あれば問題ないと思います。インストールの際、カード内の全データが消去されます。</p>

<h3>SDカードへの書き込み。</h3>

<p>今回はMacOSXで作業しました。Unix系のOSならおそらくほぼ同じ方法でできるはず。最初にSDカードのデバイス名を調べます。SDカードを接続する前に、以下のコマンドを実行します。</p>

<pre><code>$ df -h
</code></pre>

<p>次にSDカード接続後に同じコマンドを実行します。私の環境の場合、SDカード名は<code>/dev/disk1s1</code>になっていました。次にSDカードをアンマウントします。</p>

<pre><code>$ umount /dev/disk1s1
</code></pre>

<p>ダウンロードしたOSのイメージがあるところへ移動し、ddコマンドを実行。この際、デバイスの指定は<code>/dev/disk1s1</code> => <code>/dev/rdisk1</code>のようにrawデバイスを指定します。</p>

<pre><code>$ cd ~/Downloads
$ dd sudo time dd bs=1m if=2012-12-16-wheezy-raspbian.img of=/dev/rdisk1
</code></pre>

<p>これでOSの入ったSDカードの準備ができた。</p>

<h3>起動</h3>

<p>Raspberry Piに先ほど準備したSDカード、モニタ、キーボード、LAN、その他デバイスを接続し、USBポートまたはGPIOから電源を供給して起動します。電源供給と同時に起動するので、電源の接続は最後にしてください<br/>
初回のみ、設定画面が表示されます。項目は以下の通りです。</p>

<p>・info<br/>
　　このツールの情報の確認。スルーして問題なし。<br/>
・expand_rootfs<br/>
　　デフォルトではSDカードのうち2GB程度しか使用していません。<br/>
　　全領域を使用するようにここで設定出来ます。設定後、要再起動。<br/>
・overscan<br/>
　　テレビに出力する場合、画面周囲がきちんと表示されない場合があります。<br/>
　　その際、ここで周囲に余白を設定することで、正常に表示できるようになります。<br/>
・configure_keyboard<br/>
　　キーボードの配列の設定。<br/>
　　日本語配列、US配列、使用しているキーボードに合わせて設定。<br/>
・change_pass<br/>
　　デフォルトのユーザである'pi' ユーザのパスワードの変更。<br/>
　　自分のパスワードに変更しておくべき。<br/>
・change_locale<br/>
　　ロケールの設定。<br/>
　　日本語フォントが入っていないので、UTF-8に設定しても日本語は文字化けする。<br/>
　　とりあえずデフォルトのままで問題ない。<br/>
・change_timezone<br/>
　　時間の設定。日本は"Asia"の"Tokyo"を指定すればよい。<br/>
・memory_split<br/>
　　GPUどれだけメモリを割り当てるか。通常はデフォルトのままで問題ない。<br/>
・ssh<br/>
　　sshを利用してリモートログインする場合"Enable"を指定。<br/>
　　設定しておけば別マシンから開発できる。<br/>
・boot_behaviour<br/>
　　"Yes"を選択すれば、最初からGUIな画面で起動する。<br/>
　　CUIで起動して、startxするのが面倒くさいなら"Yes"に。<br/>
・update<br/>
　　この設定用ツール raspi-config のアップデート。</p>

<p>これで最低限の設定は終わりです。もし、再設定したいならコンソールから</p>

<pre><code>$ sudo raspi-config
</code></pre>

<p>を実行することで、いつでも再設定出来ます。</p>

<h2>使用した感想</h2>

<p>私が買ったのは$35のモデルです。<br/>
想像以上に高性能です。コンソールから使う分には特に不満なし。<br/>
軽い開発なら実機のみでそれなりにできそう。<br/>
低消費電力なのでサーバー用途に良さそう。<br/>
GPIO / オーディオ出力 などいろいろ遊べそう。<br/>
なかなか遊びがいのあるおもちゃですね。</p>
]]></content>
  </entry>
  
</feed>
